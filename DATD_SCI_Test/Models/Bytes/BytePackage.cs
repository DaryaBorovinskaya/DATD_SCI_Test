using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DATD_SCI_Test.Models.Bytes
{
    /// <summary>
    /// Пакеты байт для запросов к УСПД.
    /// Байты написаны в 16 системе счисления
    /// </summary>
    public class BytePackage
    {
        private static byte[] _defaultWriteBaseUnitBytes =
              { 0x68, 0xE8, 0x1C, 0x00, 0x4E, 0x00, 0x7D, 0x01, 0x0D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0xD7,
                0x0D, 0x00, 0x00, 0x02, 0x00, 0x00, // OHL RF
                0x0E, 0x00, 0x00, 0x02, 0x01, 0x00, // Режим работы - в реальном времени
                0x0F, 0x00, 0x00, 0x02, 0x01, 0x00, // Тип устройства - удалённое уст.
                0x10, 0x00, 0x00, 0x02, 0x00, 0x00, // Тип индикаторов - RF001
                0x11, 0x00, 0x00, 0x02, 0x60, 0x54, // Интервал блокировки при ошибке (?)
                0x12, 0x00, 0x00, 0x02, 0x78, 0x1E, // 
                0x13, 0x00, 0x00, 0x02, 0x78, 0x00, // AD Acquisition time
                0x14, 0x00, 0x00, 0x02, 0x3C, 0x00, // Heartbeat time
                0x15, 0x00, 0x00, 0x02, 0x84, 0x03, // Время отправки запроса на получение телеизмерений
                0x16, 0x00, 0x00, 0x02, 0x3C, 0x00, // 
                0x18, 0x00, 0x00, 0x02, 0x84, 0x03, // 
                0x1A, 0x00, 0x00, 0x02, 0x3C, 0x00, // Время которое фиксирует режим "power" если работа блока питания нестабильна 
                0x1F, 0x00, 0x00, 0x02, 0x01, 0x00, // Адрес подстанции
                0x21, 0x00, 0x00, 0x02, 0x06, 0x00, // Частота работы RF устройства
                0x22, 0x00, 0x00, 0x02, 0x64, 0x00, // 
                0x23, 0x00, 0x00, 0x02, 0x00, 0x00, // 
                0x24, 0x00, 0x00, 0x02, 0x0A, 0x00, // 
                0x8B, 0xFF, 0x00, 0x02, 0xD3, 0x04, // Значение защиты перенапряжения
                0x8C, 0xFF, 0x00, 0x02, 0x5B, 0x13, // Частота дикретизации АЦП батареи
                0x93, 0xFF, 0x00, 0x02, 0x00, 0x00, // 
                0x8D, 0xFF, 0x00, 0x02, 0x00, 0x00, // 
                0x8E, 0xFF, 0x00, 0x02, 0x00, 0x00, // 
                0x8F, 0xFF, 0x00, 0x02, 0x00, 0x00, // 
                0xA0, 0x00, 0x00, 0x01, 0x00,
                0xA1, 0x00, 0x00, 0x01, 0x00,
                0xA2, 0x00, 0x00, 0x01, 0x00,
                0xA3, 0x00, 0x00, 0x01, 0x00,
                0xA4, 0x00, 0x00, 0x01, 0x00,
                0xA5, 0x00, 0x00, 0x02, 0x00, 0x00,
                0xA6, 0x00, 0x00, 0x02, 0x00, 0x00,
                0x85, 0xFF, 0x00, 0x01, 0x00,
                0x1F, 0xFF, 0x00, 0x01, 0x00,
                0x86, 0xFF, 0x00, 0x02, 0x0A, 0x00,
                0x9D, 0xFF, 0x00, 0x02, 0x00, 0x00,
                0x9E, 0xFF, 0x00, 0x01, 0x00,
                0x20, 0xFF, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
                0x21, 0xFF, 0x00, 0x01, 0x00
            };

        private static byte[] _readParamsBaseUnitBytes = { 0x68, 0x11, 0x1A, 0x00, 0x4C, 0x00, 0x7A, 0x01, 0x0D, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00 };

        private static byte[] _initBaseUnitBytes = { 0x68, 0x04, 0x07, 0x00, 0x02, 0x00 };

        private static byte[] _readGeneralParamsBytes = { 0x68, 0x11, 0x1A, 0x00, 0x4C, 0x00, 0x7A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x04, 0x00 };

        private static byte[] _defaultGeneralPackageBytes =
              { 0x68, 0x40, 0x1C, 0x00, 0x4E, 0x00, 0x7D, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x04, 0x2F,
                0x00, 0x30, 0x00, 0x02, 0x00, 0x00,
                0x01, 0x30, 0x00, 0x01, 0x00,
                0x02, 0x30, 0x00, 0x02, 0x00, 0x00,
                0x03, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
                0x04, 0x30, 0x00, 0x02, 0x00, 0x00,
                0x05, 0x30, 0x00, 0x01, 0x00,
                0x06, 0x30, 0x00, 0x01, 0x00,
                0x07, 0x30, 0x00, 0x02, 0x00, 0x00 };

        private static byte[] _readPhaseToPhaseBytes = { 0x68, 0x11, 0x1A, 0x00, 0x4C, 0x00, 0x7A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x04, 0x00 };
        
        private static byte[] _defaultPhaseToPhasePackage =
              { 0x68, 0x25, 0x02, 0x00, 0x00, 0x00, 0x7D, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B, 0x00, 0x04, 0x14,
                0x00, 0x31, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x31, 0x00, 0x02, 0x00, 0x00,
                0x02, 0x31, 0x00, 0x02, 0x00, 0x00 };

        private static byte[] _readGroundParamsBytes = { 0x68, 0x11, 0x1A, 0x00, 0x4C, 0x00, 0x7A, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x04, 0x00 };

        private static byte[] _defaultGroundPackage =
              { 0x68, 0x1C, 0x02, 0x00, 0x00, 0x00, 0x7D, 0x01, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2C, 0x00, 0x04, 0x0B,
                0x00, 0x32, 0x00, 0x01, 0x1E,
                0x01, 0x32, 0x00, 0x02, 0x0A, 0x00 };

        /// <summary>
        /// Получение пакета байтов по его названию
        /// </summary>
        /// <param name="bytePacket"></param>
        /// <returns></returns>
        public static byte[] GetBytePackage(BytePackageEnum bytePacket)
        {
            return bytePacket switch
            {
                BytePackageEnum.InitBaseUnit => _initBaseUnitBytes,
                BytePackageEnum.ReadParamsBaseUnit => _readParamsBaseUnitBytes,
                BytePackageEnum.DefaultWriteBaseUnit => _defaultWriteBaseUnitBytes,
                BytePackageEnum.ReadGeneralParamsIndicator => _readGeneralParamsBytes,
                BytePackageEnum.ReadPhaseToPhaseParamsIndicator => _readPhaseToPhaseBytes,
                BytePackageEnum.ReadGroundParamsIndicator => _readGroundParamsBytes,
                BytePackageEnum.DefaultGeneralPackageIndicator => _defaultGeneralPackageBytes,
                BytePackageEnum.DefaultPhaseToPhasePackageIndicator => _defaultPhaseToPhasePackage,
                BytePackageEnum.DefaultGroundPackageIndicator => _defaultGroundPackage,
                _ => []
            };
        }
    }
}
